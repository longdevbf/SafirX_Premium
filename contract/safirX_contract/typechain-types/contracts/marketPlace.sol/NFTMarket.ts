/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface NFTMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyCollectionBundle"
      | "buyNFT"
      | "cancelCollection"
      | "cancelListing"
      | "collectionListings"
      | "listCollectionBundle"
      | "listSingleNFT"
      | "listings"
      | "owner"
      | "renounceOwnership"
      | "tokenToListingId"
      | "transferOwnership"
      | "updateBundlePrice"
      | "updatePrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BundlePriceUpdated"
      | "CollectionBundleListed"
      | "CollectionBundleSold"
      | "CollectionCancelled"
      | "ListingCancelled"
      | "NFTListed"
      | "NFTSold"
      | "OwnershipTransferred"
      | "PriceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyCollectionBundle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionListings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listCollectionBundle",
    values: [AddressLike, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listSingleNFT",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToListingId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBundlePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyCollectionBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listCollectionBundle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listSingleNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBundlePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
}

export namespace BundlePriceUpdatedEvent {
  export type InputTuple = [
    collectionId: BigNumberish,
    oldPrice: BigNumberish,
    newPrice: BigNumberish
  ];
  export type OutputTuple = [
    collectionId: bigint,
    oldPrice: bigint,
    newPrice: bigint
  ];
  export interface OutputObject {
    collectionId: bigint;
    oldPrice: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionBundleListedEvent {
  export type InputTuple = [
    collectionId: BigNumberish,
    nftContract: AddressLike,
    seller: AddressLike,
    tokenIds: BigNumberish[],
    bundlePrice: BigNumberish,
    collectionName: string
  ];
  export type OutputTuple = [
    collectionId: bigint,
    nftContract: string,
    seller: string,
    tokenIds: bigint[],
    bundlePrice: bigint,
    collectionName: string
  ];
  export interface OutputObject {
    collectionId: bigint;
    nftContract: string;
    seller: string;
    tokenIds: bigint[];
    bundlePrice: bigint;
    collectionName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionBundleSoldEvent {
  export type InputTuple = [
    collectionId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    tokenIds: BigNumberish[],
    bundlePrice: BigNumberish
  ];
  export type OutputTuple = [
    collectionId: bigint,
    seller: string,
    buyer: string,
    tokenIds: bigint[],
    bundlePrice: bigint
  ];
  export interface OutputObject {
    collectionId: bigint;
    seller: string;
    buyer: string;
    tokenIds: bigint[];
    bundlePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionCancelledEvent {
  export type InputTuple = [
    collectionId: BigNumberish,
    seller: AddressLike,
    listingType: BigNumberish
  ];
  export type OutputTuple = [
    collectionId: bigint,
    seller: string,
    listingType: bigint
  ];
  export interface OutputObject {
    collectionId: bigint;
    seller: string;
    listingType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCancelledEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    seller: AddressLike,
    listingType: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    seller: string,
    listingType: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    seller: string;
    listingType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTListedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    nftContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish,
    listingType: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    nftContract: string,
    tokenId: bigint,
    seller: string,
    price: bigint,
    listingType: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    nftContract: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
    listingType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTSoldEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    price: BigNumberish,
    listingType: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    seller: string,
    buyer: string,
    price: bigint,
    listingType: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    seller: string;
    buyer: string;
    price: bigint;
    listingType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    listingId: BigNumberish,
    oldPrice: BigNumberish,
    newPrice: BigNumberish
  ];
  export type OutputTuple = [
    listingId: bigint,
    oldPrice: bigint,
    newPrice: bigint
  ];
  export interface OutputObject {
    listingId: bigint;
    oldPrice: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTMarket extends BaseContract {
  connect(runner?: ContractRunner | null): NFTMarket;
  waitForDeployment(): Promise<this>;

  interface: NFTMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyCollectionBundle: TypedContractMethod<
    [collectionId: BigNumberish],
    [void],
    "payable"
  >;

  buyNFT: TypedContractMethod<[listingId: BigNumberish], [void], "payable">;

  cancelCollection: TypedContractMethod<
    [collectionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelListing: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  collectionListings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, string, bigint] & {
        collectionId: bigint;
        nftContract: string;
        seller: string;
        bundlePrice: bigint;
        isActive: boolean;
        collectionName: string;
        listingType: bigint;
      }
    ],
    "view"
  >;

  listCollectionBundle: TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenIds: BigNumberish[],
      bundlePrice: BigNumberish,
      collectionName: string
    ],
    [void],
    "nonpayable"
  >;

  listSingleNFT: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean] & {
        tokenId: bigint;
        nftContract: string;
        seller: string;
        price: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tokenToListingId: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBundlePrice: TypedContractMethod<
    [collectionId: BigNumberish, newBundlePrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePrice: TypedContractMethod<
    [listingId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyCollectionBundle"
  ): TypedContractMethod<[collectionId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "buyNFT"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelCollection"
  ): TypedContractMethod<[collectionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectionListings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, string, bigint] & {
        collectionId: bigint;
        nftContract: string;
        seller: string;
        bundlePrice: bigint;
        isActive: boolean;
        collectionName: string;
        listingType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "listCollectionBundle"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenIds: BigNumberish[],
      bundlePrice: BigNumberish,
      collectionName: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listSingleNFT"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean] & {
        tokenId: bigint;
        nftContract: string;
        seller: string;
        price: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenToListingId"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBundlePrice"
  ): TypedContractMethod<
    [collectionId: BigNumberish, newBundlePrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<
    [listingId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BundlePriceUpdated"
  ): TypedContractEvent<
    BundlePriceUpdatedEvent.InputTuple,
    BundlePriceUpdatedEvent.OutputTuple,
    BundlePriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionBundleListed"
  ): TypedContractEvent<
    CollectionBundleListedEvent.InputTuple,
    CollectionBundleListedEvent.OutputTuple,
    CollectionBundleListedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionBundleSold"
  ): TypedContractEvent<
    CollectionBundleSoldEvent.InputTuple,
    CollectionBundleSoldEvent.OutputTuple,
    CollectionBundleSoldEvent.OutputObject
  >;
  getEvent(
    key: "CollectionCancelled"
  ): TypedContractEvent<
    CollectionCancelledEvent.InputTuple,
    CollectionCancelledEvent.OutputTuple,
    CollectionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ListingCancelled"
  ): TypedContractEvent<
    ListingCancelledEvent.InputTuple,
    ListingCancelledEvent.OutputTuple,
    ListingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "NFTListed"
  ): TypedContractEvent<
    NFTListedEvent.InputTuple,
    NFTListedEvent.OutputTuple,
    NFTListedEvent.OutputObject
  >;
  getEvent(
    key: "NFTSold"
  ): TypedContractEvent<
    NFTSoldEvent.InputTuple,
    NFTSoldEvent.OutputTuple,
    NFTSoldEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;

  filters: {
    "BundlePriceUpdated(uint256,uint256,uint256)": TypedContractEvent<
      BundlePriceUpdatedEvent.InputTuple,
      BundlePriceUpdatedEvent.OutputTuple,
      BundlePriceUpdatedEvent.OutputObject
    >;
    BundlePriceUpdated: TypedContractEvent<
      BundlePriceUpdatedEvent.InputTuple,
      BundlePriceUpdatedEvent.OutputTuple,
      BundlePriceUpdatedEvent.OutputObject
    >;

    "CollectionBundleListed(uint256,address,address,uint256[],uint256,string)": TypedContractEvent<
      CollectionBundleListedEvent.InputTuple,
      CollectionBundleListedEvent.OutputTuple,
      CollectionBundleListedEvent.OutputObject
    >;
    CollectionBundleListed: TypedContractEvent<
      CollectionBundleListedEvent.InputTuple,
      CollectionBundleListedEvent.OutputTuple,
      CollectionBundleListedEvent.OutputObject
    >;

    "CollectionBundleSold(uint256,address,address,uint256[],uint256)": TypedContractEvent<
      CollectionBundleSoldEvent.InputTuple,
      CollectionBundleSoldEvent.OutputTuple,
      CollectionBundleSoldEvent.OutputObject
    >;
    CollectionBundleSold: TypedContractEvent<
      CollectionBundleSoldEvent.InputTuple,
      CollectionBundleSoldEvent.OutputTuple,
      CollectionBundleSoldEvent.OutputObject
    >;

    "CollectionCancelled(uint256,address,uint8)": TypedContractEvent<
      CollectionCancelledEvent.InputTuple,
      CollectionCancelledEvent.OutputTuple,
      CollectionCancelledEvent.OutputObject
    >;
    CollectionCancelled: TypedContractEvent<
      CollectionCancelledEvent.InputTuple,
      CollectionCancelledEvent.OutputTuple,
      CollectionCancelledEvent.OutputObject
    >;

    "ListingCancelled(uint256,address,uint8)": TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;
    ListingCancelled: TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;

    "NFTListed(uint256,address,uint256,address,uint256,uint8)": TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;
    NFTListed: TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;

    "NFTSold(uint256,address,address,uint256,uint8)": TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;
    NFTSold: TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceUpdated(uint256,uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
  };
}
