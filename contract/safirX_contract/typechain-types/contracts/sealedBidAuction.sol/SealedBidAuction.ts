/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SealedBidsealedBidAuction {
  export type BidStruct = {
    bidder: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    deposit: BigNumberish;
  };

  export type BidStructOutput = [
    bidder: string,
    amount: bigint,
    timestamp: bigint,
    deposit: bigint
  ] & { bidder: string; amount: bigint; timestamp: bigint; deposit: bigint };
}

export interface SealedBidsealedBidAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BID_EXTENSION_TIME"
      | "CLAIM_DURATION"
      | "MAX_sealedBidAuction_DURATION"
      | "MAX_BIDS_PER_sealedBidAuction"
      | "MAX_COLLECTION_SIZE"
      | "MAX_EXTENSIONS"
      | "MIN_sealedBidAuction_DURATION"
      | "MIN_BID_INCREMENT"
      | "PLATFORM_FEE"
      | "sealedBidAuctionBids"
      | "sealedBidAuctionDeposits"
      | "sealedBidAuctions"
      | "bidderToIndex"
      | "cancelsealedBidAuction"
      | "claimNFT"
      | "createCollectionsealedBidAuction"
      | "createSingleNFTsealedBidAuction"
      | "finalizesealedBidAuction"
      | "getsealedBidAuctionBids"
      | "onERC721Received"
      | "owner"
      | "placeBid"
      | "reclaimNFT"
      | "renounceOwnership"
      | "transferOwnership"
      | "usersealedBidAuctions"
      | "userBids"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "sealedBidAuctionCancelled"
      | "sealedBidAuctionCreated"
      | "sealedBidAuctionFinalized"
      | "BidPlaced"
      | "NFTClaimed"
      | "NFTReclaimed"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BID_EXTENSION_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLAIM_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_sealedBidAuction_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BIDS_PER_sealedBidAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_COLLECTION_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_EXTENSIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_sealedBidAuction_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_BID_INCREMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sealedBidAuctionBids",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sealedBidAuctionDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sealedBidAuctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bidderToIndex",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelsealedBidAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollectionsealedBidAuction",
    values: [
      AddressLike,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSingleNFTsealedBidAuction",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizesealedBidAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getsealedBidAuctionBids",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usersealedBidAuctions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBids",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BID_EXTENSION_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLAIM_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_sealedBidAuction_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BIDS_PER_sealedBidAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_COLLECTION_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_EXTENSIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_sealedBidAuction_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_BID_INCREMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sealedBidAuctionBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sealedBidAuctionDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sealedBidAuctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidderToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelsealedBidAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCollectionsealedBidAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSingleNFTsealedBidAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizesealedBidAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getsealedBidAuctionBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reclaimNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usersealedBidAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBids", data: BytesLike): Result;
}

export namespace sealedBidAuctionCancelledEvent {
  export type InputTuple = [
    sealedBidAuctionId: BigNumberish,
    seller: AddressLike,
    reason: string
  ];
  export type OutputTuple = [sealedBidAuctionId: bigint, seller: string, reason: string];
  export interface OutputObject {
    sealedBidAuctionId: bigint;
    seller: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace sealedBidAuctionCreatedEvent {
  export type InputTuple = [
    sealedBidAuctionId: BigNumberish,
    seller: AddressLike,
    nftContract: AddressLike,
    sealedBidAuctionType: BigNumberish,
    tokenId: BigNumberish,
    tokenIds: BigNumberish[],
    startingPrice: BigNumberish,
    endTime: BigNumberish,
    title: string
  ];
  export type OutputTuple = [
    sealedBidAuctionId: bigint,
    seller: string,
    nftContract: string,
    sealedBidAuctionType: bigint,
    tokenId: bigint,
    tokenIds: bigint[],
    startingPrice: bigint,
    endTime: bigint,
    title: string
  ];
  export interface OutputObject {
    sealedBidAuctionId: bigint;
    seller: string;
    nftContract: string;
    sealedBidAuctionType: bigint;
    tokenId: bigint;
    tokenIds: bigint[];
    startingPrice: bigint;
    endTime: bigint;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace sealedBidAuctionFinalizedEvent {
  export type InputTuple = [
    sealedBidAuctionId: BigNumberish,
    winner: AddressLike,
    finalPrice: BigNumberish,
    platformFeeAmount: BigNumberish,
    sellerAmount: BigNumberish
  ];
  export type OutputTuple = [
    sealedBidAuctionId: bigint,
    winner: string,
    finalPrice: bigint,
    platformFeeAmount: bigint,
    sellerAmount: bigint
  ];
  export interface OutputObject {
    sealedBidAuctionId: bigint;
    winner: string;
    finalPrice: bigint;
    platformFeeAmount: bigint;
    sellerAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    sealedBidAuctionId: BigNumberish,
    bidder: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    sealedBidAuctionId: bigint,
    bidder: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    sealedBidAuctionId: bigint;
    bidder: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTClaimedEvent {
  export type InputTuple = [
    sealedBidAuctionId: BigNumberish,
    winner: AddressLike,
    amountPaid: BigNumberish
  ];
  export type OutputTuple = [
    sealedBidAuctionId: bigint,
    winner: string,
    amountPaid: bigint
  ];
  export interface OutputObject {
    sealedBidAuctionId: bigint;
    winner: string;
    amountPaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTReclaimedEvent {
  export type InputTuple = [sealedBidAuctionId: BigNumberish, seller: AddressLike];
  export type OutputTuple = [sealedBidAuctionId: bigint, seller: string];
  export interface OutputObject {
    sealedBidAuctionId: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SealedBidsealedBidAuction extends BaseContract {
  connect(runner?: ContractRunner | null): SealedBidsealedBidAuction;
  waitForDeployment(): Promise<this>;

  interface: SealedBidsealedBidAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BID_EXTENSION_TIME: TypedContractMethod<[], [bigint], "view">;

  CLAIM_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_sealedBidAuction_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_BIDS_PER_sealedBidAuction: TypedContractMethod<[], [bigint], "view">;

  MAX_COLLECTION_SIZE: TypedContractMethod<[], [bigint], "view">;

  MAX_EXTENSIONS: TypedContractMethod<[], [bigint], "view">;

  MIN_sealedBidAuction_DURATION: TypedContractMethod<[], [bigint], "view">;

  MIN_BID_INCREMENT: TypedContractMethod<[], [bigint], "view">;

  PLATFORM_FEE: TypedContractMethod<[], [bigint], "view">;

  sealedBidAuctionBids: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        bidder: string;
        amount: bigint;
        timestamp: bigint;
        deposit: bigint;
      }
    ],
    "view"
  >;

  sealedBidAuctionDeposits: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  sealedBidAuctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
        bigint
      ] & {
        sealedBidAuctionId: bigint;
        sealedBidAuctionType: bigint;
        nftContract: string;
        tokenId: bigint;
        seller: string;
        startingPrice: bigint;
        reservePrice: bigint;
        minBidIncrement: bigint;
        startTime: bigint;
        endTime: bigint;
        bidExtensionTime: bigint;
        state: bigint;
        totalBids: bigint;
        highestBidder: string;
        highestBid: bigint;
        title: string;
        description: string;
        claimDeadline: bigint;
      }
    ],
    "view"
  >;

  bidderToIndex: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  cancelsealedBidAuction: TypedContractMethod<
    [sealedBidAuctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimNFT: TypedContractMethod<[sealedBidAuctionId: BigNumberish], [void], "payable">;

  createCollectionsealedBidAuction: TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenIds: BigNumberish[],
      startingPrice: BigNumberish,
      reservePrice: BigNumberish,
      minBidIncrement: BigNumberish,
      duration: BigNumberish,
      title: string,
      description: string
    ],
    [bigint],
    "nonpayable"
  >;

  createSingleNFTsealedBidAuction: TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenId: BigNumberish,
      startingPrice: BigNumberish,
      reservePrice: BigNumberish,
      minBidIncrement: BigNumberish,
      duration: BigNumberish,
      title: string,
      description: string
    ],
    [bigint],
    "nonpayable"
  >;

  finalizesealedBidAuction: TypedContractMethod<
    [sealedBidAuctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getsealedBidAuctionBids: TypedContractMethod<
    [sealedBidAuctionId: BigNumberish],
    [SealedBidsealedBidAuction.BidStructOutput[]],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  placeBid: TypedContractMethod<
    [sealedBidAuctionId: BigNumberish, bidAmount: BigNumberish],
    [void],
    "payable"
  >;

  reclaimNFT: TypedContractMethod<
    [sealedBidAuctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usersealedBidAuctions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userBids: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BID_EXTENSION_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CLAIM_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_sealedBidAuction_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_BIDS_PER_sealedBidAuction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_COLLECTION_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_EXTENSIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_sealedBidAuction_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_BID_INCREMENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sealedBidAuctionBids"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        bidder: string;
        amount: bigint;
        timestamp: bigint;
        deposit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sealedBidAuctionDeposits"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "sealedBidAuctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
        bigint
      ] & {
        sealedBidAuctionId: bigint;
        sealedBidAuctionType: bigint;
        nftContract: string;
        tokenId: bigint;
        seller: string;
        startingPrice: bigint;
        reservePrice: bigint;
        minBidIncrement: bigint;
        startTime: bigint;
        endTime: bigint;
        bidExtensionTime: bigint;
        state: bigint;
        totalBids: bigint;
        highestBidder: string;
        highestBid: bigint;
        title: string;
        description: string;
        claimDeadline: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bidderToIndex"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelsealedBidAuction"
  ): TypedContractMethod<[sealedBidAuctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimNFT"
  ): TypedContractMethod<[sealedBidAuctionId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createCollectionsealedBidAuction"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenIds: BigNumberish[],
      startingPrice: BigNumberish,
      reservePrice: BigNumberish,
      minBidIncrement: BigNumberish,
      duration: BigNumberish,
      title: string,
      description: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSingleNFTsealedBidAuction"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenId: BigNumberish,
      startingPrice: BigNumberish,
      reservePrice: BigNumberish,
      minBidIncrement: BigNumberish,
      duration: BigNumberish,
      title: string,
      description: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizesealedBidAuction"
  ): TypedContractMethod<[sealedBidAuctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getsealedBidAuctionBids"
  ): TypedContractMethod<
    [sealedBidAuctionId: BigNumberish],
    [SealedBidsealedBidAuction.BidStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [sealedBidAuctionId: BigNumberish, bidAmount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "reclaimNFT"
  ): TypedContractMethod<[sealedBidAuctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usersealedBidAuctions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userBids"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "sealedBidAuctionCancelled"
  ): TypedContractEvent<
    sealedBidAuctionCancelledEvent.InputTuple,
    sealedBidAuctionCancelledEvent.OutputTuple,
    sealedBidAuctionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "sealedBidAuctionCreated"
  ): TypedContractEvent<
    sealedBidAuctionCreatedEvent.InputTuple,
    sealedBidAuctionCreatedEvent.OutputTuple,
    sealedBidAuctionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "sealedBidAuctionFinalized"
  ): TypedContractEvent<
    sealedBidAuctionFinalizedEvent.InputTuple,
    sealedBidAuctionFinalizedEvent.OutputTuple,
    sealedBidAuctionFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "NFTClaimed"
  ): TypedContractEvent<
    NFTClaimedEvent.InputTuple,
    NFTClaimedEvent.OutputTuple,
    NFTClaimedEvent.OutputObject
  >;
  getEvent(
    key: "NFTReclaimed"
  ): TypedContractEvent<
    NFTReclaimedEvent.InputTuple,
    NFTReclaimedEvent.OutputTuple,
    NFTReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "sealedBidAuctionCancelled(uint256,address,string)": TypedContractEvent<
      sealedBidAuctionCancelledEvent.InputTuple,
      sealedBidAuctionCancelledEvent.OutputTuple,
      sealedBidAuctionCancelledEvent.OutputObject
    >;
    sealedBidAuctionCancelled: TypedContractEvent<
      sealedBidAuctionCancelledEvent.InputTuple,
      sealedBidAuctionCancelledEvent.OutputTuple,
      sealedBidAuctionCancelledEvent.OutputObject
    >;

    "sealedBidAuctionCreated(uint256,address,address,uint8,uint256,uint256[],uint256,uint256,string)": TypedContractEvent<
      sealedBidAuctionCreatedEvent.InputTuple,
      sealedBidAuctionCreatedEvent.OutputTuple,
      sealedBidAuctionCreatedEvent.OutputObject
    >;
    sealedBidAuctionCreated: TypedContractEvent<
      sealedBidAuctionCreatedEvent.InputTuple,
      sealedBidAuctionCreatedEvent.OutputTuple,
      sealedBidAuctionCreatedEvent.OutputObject
    >;

    "sealedBidAuctionFinalized(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      sealedBidAuctionFinalizedEvent.InputTuple,
      sealedBidAuctionFinalizedEvent.OutputTuple,
      sealedBidAuctionFinalizedEvent.OutputObject
    >;
    sealedBidAuctionFinalized: TypedContractEvent<
      sealedBidAuctionFinalizedEvent.InputTuple,
      sealedBidAuctionFinalizedEvent.OutputTuple,
      sealedBidAuctionFinalizedEvent.OutputObject
    >;

    "BidPlaced(uint256,address,uint256,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "NFTClaimed(uint256,address,uint256)": TypedContractEvent<
      NFTClaimedEvent.InputTuple,
      NFTClaimedEvent.OutputTuple,
      NFTClaimedEvent.OutputObject
    >;
    NFTClaimed: TypedContractEvent<
      NFTClaimedEvent.InputTuple,
      NFTClaimedEvent.OutputTuple,
      NFTClaimedEvent.OutputObject
    >;

    "NFTReclaimed(uint256,address)": TypedContractEvent<
      NFTReclaimedEvent.InputTuple,
      NFTReclaimedEvent.OutputTuple,
      NFTReclaimedEvent.OutputObject
    >;
    NFTReclaimed: TypedContractEvent<
      NFTReclaimedEvent.InputTuple,
      NFTReclaimedEvent.OutputTuple,
      NFTReclaimedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
